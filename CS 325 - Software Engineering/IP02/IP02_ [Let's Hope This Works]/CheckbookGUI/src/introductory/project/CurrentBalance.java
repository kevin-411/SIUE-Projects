package introductory.project;

import java.awt.Font;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.Scanner;
import java.util.concurrent.atomic.AtomicReference;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**Current Balance Class
 *Main class 
 * 
 * @author Brian Olsen, Bryan Allen
 */
public class CurrentBalance extends javax.swing.JFrame {
    private static double balance = 0.00;
    private static String mode = "";
    private static int checkNumber = 1001;
    double amountNumber;
    Processor Proc = new Processor();
    static OutputDialog output = new OutputDialog();
    private String currentTransactionFile;
    private String Transactions[];
    private int transactionCount = 0;
    
    /**CurrentBalance()
     * Default Constructor for the Current Balance class
     */
    public CurrentBalance() {
        currentTransactionFile="";
	initComponents();
        Transactions = new String[100];
        transactionCount=0;
	LabelBalance.setEnabled(false);
    }
    /**Main function
   * 
   * @param args 
   */     
    public static void main(String args[]) {
	CurrentBalance account = new CurrentBalance();
	account.setVisible(true);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        jDialogWithdrawDeposit = new javax.swing.JDialog();
        LabelWithdrawDeposit = new javax.swing.JLabel();
        TextFieldAmount = new javax.swing.JTextField();
        LabelMoneySign = new javax.swing.JLabel();
        ButtonCancel = new javax.swing.JButton();
        ButtonOK = new javax.swing.JButton();
        TextFieldMemo = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jDialogError = new javax.swing.JDialog();
        ButtonErrorOK = new javax.swing.JButton();
        jFrameInputDialog = new javax.swing.JFrame();
        nameField = new javax.swing.JTextField();
        memoField = new javax.swing.JTextField();
        nameLabel = new javax.swing.JLabel();
        memoLabel = new javax.swing.JLabel();
        amountLabel = new javax.swing.JLabel();
        amountField = new javax.swing.JTextField();
        headerLabel = new javax.swing.JLabel();
        nextButton = new javax.swing.JButton();
        dateDisplayLabel = new javax.swing.JLabel();
        CheckBoxViewCheck = new javax.swing.JCheckBox();
        LabelError = new javax.swing.JLabel();
        LabelBalance = new javax.swing.JLabel();
        LabelStartup = new javax.swing.JLabel();
        ButtonWriteCheck = new javax.swing.JButton();
        ButtonWithdrawCash = new javax.swing.JButton();
        ButtonMakeDeposit = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        MenuFile = new javax.swing.JMenu();
        MenuFileNew = new javax.swing.JMenu();
        MenuFileNewChkbk = new javax.swing.JMenuItem();
        MenuFileOpen = new javax.swing.JMenu();
        MenuFileOpenChkbk = new javax.swing.JMenuItem();
        MenuFileSave = new javax.swing.JMenuItem();
        MenuFileExit = new javax.swing.JMenuItem();

        jMenuItem1.setText("jMenuItem1");

        jDialogWithdrawDeposit.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        jDialogWithdrawDeposit.setLocationByPlatform(true);
        jDialogWithdrawDeposit.setMinimumSize(new java.awt.Dimension(215, 210));
        jDialogWithdrawDeposit.setModalityType(java.awt.Dialog.ModalityType.APPLICATION_MODAL);
        jDialogWithdrawDeposit.setResizable(false);
        jDialogWithdrawDeposit.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                jDialogWithdrawDepositWindowClosing(evt);
            }
        });
        jDialogWithdrawDeposit.getContentPane().setLayout(null);

        LabelWithdrawDeposit.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        LabelWithdrawDeposit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LabelWithdrawDeposit.setLabelFor(TextFieldAmount);
        jDialogWithdrawDeposit.getContentPane().add(LabelWithdrawDeposit);
        LabelWithdrawDeposit.setBounds(20, 10, 180, 35);

        TextFieldAmount.setToolTipText("Enter Amount");
        TextFieldAmount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TextFieldAmountActionPerformed(evt);
            }
        });
        jDialogWithdrawDeposit.getContentPane().add(TextFieldAmount);
        TextFieldAmount.setBounds(20, 52, 180, 34);

        LabelMoneySign.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        LabelMoneySign.setText("$");
        jDialogWithdrawDeposit.getContentPane().add(LabelMoneySign);
        LabelMoneySign.setBounds(10, 52, 10, 30);

        ButtonCancel.setText("Cancel");
        ButtonCancel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ButtonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonCancelActionPerformed(evt);
            }
        });
        jDialogWithdrawDeposit.getContentPane().add(ButtonCancel);
        ButtonCancel.setBounds(130, 150, 70, 25);

        ButtonOK.setText("OK");
        ButtonOK.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ButtonOK.setSelected(true);
        ButtonOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonOKActionPerformed(evt);
            }
        });
        jDialogWithdrawDeposit.getContentPane().add(ButtonOK);
        ButtonOK.setBounds(60, 150, 70, 25);

        TextFieldMemo.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        TextFieldMemo.setToolTipText("Enter a memo");
        TextFieldMemo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TextFieldMemoActionPerformed(evt);
            }
        });
        jDialogWithdrawDeposit.getContentPane().add(TextFieldMemo);
        TextFieldMemo.setBounds(20, 110, 180, 30);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel1.setText(" Memo:");
        jDialogWithdrawDeposit.getContentPane().add(jLabel1);
        jLabel1.setBounds(20, 90, 50, 20);

        jDialogError.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        jDialogError.setLocationByPlatform(true);
        jDialogError.setMinimumSize(new java.awt.Dimension(310, 120));
        jDialogError.setModalExclusionType(java.awt.Dialog.ModalExclusionType.APPLICATION_EXCLUDE);
        jDialogError.setModalityType(java.awt.Dialog.ModalityType.APPLICATION_MODAL);
        jDialogError.setResizable(false);
        jDialogError.setType(java.awt.Window.Type.POPUP);
        jDialogError.getContentPane().setLayout(null);

        ButtonErrorOK.setText("OK");
        ButtonErrorOK.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ButtonErrorOK.setSelected(true);
        ButtonErrorOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonErrorOKActionPerformed(evt);
            }
        });
        jDialogError.getContentPane().add(ButtonErrorOK);
        ButtonErrorOK.setBounds(120, 50, 60, 30);

        jFrameInputDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        jFrameInputDialog.setMinimumSize(new java.awt.Dimension(650, 220));

        nameField.setMinimumSize(new java.awt.Dimension(50, 20));

        nameLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        nameLabel.setText("Pay To The Order Of:");

        memoLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        memoLabel.setText("Memo:");

        amountLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        amountLabel.setText("$");

        amountField.setToolTipText("Enter Amount..."); // NOI18N

        headerLabel.setText("<html>\n<center>\nLet's Hope This Works \nIndividual Project 1\n</center>\n</html>");

        nextButton.setText("Next>>");
        nextButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                nextButtonMousePressed(evt);
            }
        });

        CheckBoxViewCheck.setText("View Check?");

        javax.swing.GroupLayout jFrameInputDialogLayout = new javax.swing.GroupLayout(jFrameInputDialog.getContentPane());
        jFrameInputDialog.getContentPane().setLayout(jFrameInputDialogLayout);
        jFrameInputDialogLayout.setHorizontalGroup(
            jFrameInputDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jFrameInputDialogLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jFrameInputDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jFrameInputDialogLayout.createSequentialGroup()
                        .addGroup(jFrameInputDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jFrameInputDialogLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(nameLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(amountLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jFrameInputDialogLayout.createSequentialGroup()
                                .addComponent(memoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(memoField, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(CheckBoxViewCheck)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jFrameInputDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(nextButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(amountField, javax.swing.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE)))
                    .addGroup(jFrameInputDialogLayout.createSequentialGroup()
                        .addComponent(headerLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(dateDisplayLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jFrameInputDialogLayout.setVerticalGroup(
            jFrameInputDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrameInputDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jFrameInputDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(headerLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dateDisplayLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(jFrameInputDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(amountLabel)
                    .addComponent(amountField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(jFrameInputDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(memoField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(memoLabel)
                    .addComponent(nextButton)
                    .addComponent(CheckBoxViewCheck))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        LabelError.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        LabelError.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setFocusCycleRoot(false);
        setForeground(java.awt.Color.white);
        setLocationByPlatform(true);
        setMinimumSize(new java.awt.Dimension(348, 235));
        setResizable(false);
        getContentPane().setLayout(null);

        LabelBalance.setFont(new java.awt.Font("Tahoma", 0, 48)); // NOI18N
        LabelBalance.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        LabelBalance.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        getContentPane().add(LabelBalance);
        LabelBalance.setBounds(10, 50, 320, 70);

        LabelStartup.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        LabelStartup.setText("Please open a checkbook or create a new one");
        getContentPane().add(LabelStartup);
        LabelStartup.setBounds(16, 10, 300, 40);

        ButtonWriteCheck.setFont(new java.awt.Font("Verdana", 0, 10)); // NOI18N
        ButtonWriteCheck.setText("Write Check");
        ButtonWriteCheck.setToolTipText("");
        ButtonWriteCheck.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ButtonWriteCheck.setEnabled(false);
        ButtonWriteCheck.setMaximumSize(new java.awt.Dimension(97, 23));
        ButtonWriteCheck.setMinimumSize(new java.awt.Dimension(97, 23));
        ButtonWriteCheck.setPreferredSize(new java.awt.Dimension(100, 40));
        ButtonWriteCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonWriteCheckActionPerformed(evt);
            }
        });
        getContentPane().add(ButtonWriteCheck);
        ButtonWriteCheck.setBounds(10, 130, 100, 40);

        ButtonWithdrawCash.setFont(new java.awt.Font("Verdana", 0, 10)); // NOI18N
        ButtonWithdrawCash.setText("Withdraw");
        ButtonWithdrawCash.setToolTipText("");
        ButtonWithdrawCash.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ButtonWithdrawCash.setEnabled(false);
        ButtonWithdrawCash.setMaximumSize(new java.awt.Dimension(97, 23));
        ButtonWithdrawCash.setMinimumSize(new java.awt.Dimension(97, 23));
        ButtonWithdrawCash.setPreferredSize(new java.awt.Dimension(100, 40));
        ButtonWithdrawCash.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonWithdrawCashActionPerformed(evt);
            }
        });
        getContentPane().add(ButtonWithdrawCash);
        ButtonWithdrawCash.setBounds(120, 130, 100, 40);

        ButtonMakeDeposit.setFont(new java.awt.Font("Verdana", 0, 10)); // NOI18N
        ButtonMakeDeposit.setText("Deposit");
        ButtonMakeDeposit.setToolTipText("");
        ButtonMakeDeposit.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ButtonMakeDeposit.setEnabled(false);
        ButtonMakeDeposit.setPreferredSize(new java.awt.Dimension(100, 40));
        ButtonMakeDeposit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonMakeDepositActionPerformed(evt);
            }
        });
        getContentPane().add(ButtonMakeDeposit);
        ButtonMakeDeposit.setBounds(230, 130, 100, 40);

        MenuFile.setText("File");

        MenuFileNew.setText("New");

        MenuFileNewChkbk.setText("Checkbook");
        MenuFileNewChkbk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuFileNewChkbkActionPerformed(evt);
            }
        });
        MenuFileNew.add(MenuFileNewChkbk);

        MenuFile.add(MenuFileNew);

        MenuFileOpen.setText("Open");

        MenuFileOpenChkbk.setText("Checkbook");
        MenuFileOpenChkbk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuFileOpenChkbkActionPerformed(evt);
            }
        });
        MenuFileOpen.add(MenuFileOpenChkbk);

        MenuFile.add(MenuFileOpen);

        MenuFileSave.setText("Save...");
        MenuFileSave.setEnabled(false);
        MenuFileSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuFileSaveActionPerformed(evt);
            }
        });
        MenuFile.add(MenuFileSave);

        MenuFileExit.setText("Exit");
        MenuFileExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuFileExitActionPerformed(evt);
            }
        });
        MenuFile.add(MenuFileExit);

        jMenuBar1.add(MenuFile);

        setJMenuBar(jMenuBar1);
    }// </editor-fold>//GEN-END:initComponents
    /**MenuFileNewChkbkActionPerformed
 * This is the function that handles when the New button is checked under the File menu it will check if there are any current 
 * transactions pending and prompt the user if they want to save their work in the case that there are transactions. If not
 * the user will be prompted for the new balance of their account.
 * 
 * @param evt action that triggers this function 
 */
    private void MenuFileNewChkbkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuFileNewChkbkActionPerformed
        if(VerifyAllTransactionsSaved()){
            LabelWithdrawDeposit.setText("Please enter a starting balance");
            TextFieldMemo.setText("Starting Balance");
            TextFieldMemo.setEnabled(false);
            mode = "Start";
            jDialogWithdrawDeposit.setVisible(true);
        }
    }//GEN-LAST:event_MenuFileNewChkbkActionPerformed
    /**ButtonWriteCheckActionPerformed
     * 
     * @param evt 
     */
    private void ButtonWriteCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonWriteCheckActionPerformed
	mode = "Check";
	jFrameInputDialog.setVisible(true);     
    }//GEN-LAST:event_ButtonWriteCheckActionPerformed
    /**ButtonWithdrawCashActionPerformed
     * This method sets up the withdrawDeposit jDialog to receive a withdraw amount
     * @param evt 
     */
    private void ButtonWithdrawCashActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonWithdrawCashActionPerformed
	mode = "Withdraw";
	LabelWithdrawDeposit.setText("How much do you want to withdraw?");
	jDialogWithdrawDeposit.setVisible(true);
    }//GEN-LAST:event_ButtonWithdrawCashActionPerformed
    private void ButtonOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonOKActionPerformed
        CheckTransaction(mode, TextFieldMemo.getText(), TextFieldAmount.getText());
    }//GEN-LAST:event_ButtonOKActionPerformed
    private void ButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonCancelActionPerformed
	ResetWithdrawDeposit();
    }//GEN-LAST:event_ButtonCancelActionPerformed
    private void ButtonErrorOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonErrorOKActionPerformed
        jDialogError.dispose();
    }//GEN-LAST:event_ButtonErrorOKActionPerformed
    /**ButtonMakeDepositActionPerformed
     * This method sets up the withdrawDeposit jDialog to receive a deposit amount
     * @param evt 
     */
    private void ButtonMakeDepositActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonMakeDepositActionPerformed
        mode = "Deposit";
	LabelWithdrawDeposit.setText("How much do you want to deposit?");
	jDialogWithdrawDeposit.setVisible(true);
    }//GEN-LAST:event_ButtonMakeDepositActionPerformed
    private void MenuFileExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuFileExitActionPerformed
        dispose();
    }//GEN-LAST:event_MenuFileExitActionPerformed
    private void TextFieldMemoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TextFieldMemoActionPerformed
        CheckTransaction(mode, TextFieldMemo.getText(), TextFieldAmount.getText());
    }//GEN-LAST:event_TextFieldMemoActionPerformed
    /**MenuFileOpenChkbkActionPerformed
 * This method first verifies that no transactions are open and unsaved. If so it prompts the user to save or discard the changes.
 * It then opens a dialog box to choose which file to open and filters specifically .cbk files. It then passes down the file path
 * to a scanner to LoadTransactions().
 * 
 * @param evt listener for the event of the Open Menu option being clicked
 */
    private void MenuFileOpenChkbkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuFileOpenChkbkActionPerformed
        if(VerifyAllTransactionsSaved()){
            ClearTransactions();
            JFileChooser chooser = new JFileChooser();
            FileNameExtensionFilter filter = new FileNameExtensionFilter(".cbk Files", "cbk");
            chooser.setFileFilter(filter);
            int returnVal = chooser.showOpenDialog(this.MenuFileOpenChkbk);
            if(returnVal == JFileChooser.APPROVE_OPTION) {
                currentTransactionFile=chooser.getSelectedFile().getPath();
                try {
                        LoadTransactions(new Scanner(new File(chooser.getSelectedFile().getPath())));
                    } catch (IOException ex) {
                        Logger.getLogger(CurrentBalance.class.getName()).log(Level.SEVERE, null, ex);
                    }
            }
            Startup();
        }
    }//GEN-LAST:event_MenuFileOpenChkbkActionPerformed
    private void jDialogWithdrawDepositWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_jDialogWithdrawDepositWindowClosing
        ResetWithdrawDeposit();
    }//GEN-LAST:event_jDialogWithdrawDepositWindowClosing
    /**nextButtonMousePressed
 * This function handles the input coming from the check and verifies all info is present in the fields. It later uses calls the 
 * Output Dialog to display the check if the check-box is selected.
 * 
 * @param evt listener for the next button on the check input to be pressed
 */
    private void nextButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nextButtonMousePressed
        boolean itsAllGood=true;
        if(nameField.getText().isEmpty() || memoField.getText().isEmpty() || amountField.getText().isEmpty()){
            JOptionPane.showMessageDialog(null, "Please insert a value for each Field.","Improper Input", JOptionPane.ERROR_MESSAGE);
            itsAllGood=false;
        }
        AtomicReference <String> tempAmount = new AtomicReference<>(amountField.getText());
        if(itsAllGood && stringIsAValidNumber(tempAmount)){
            amountField.setText(tempAmount.get());
            amountNumber = round(Double.parseDouble(amountField.getText()));
            Proc.convert(amountNumber, amountField.getText(), 0);
            if(CheckBoxViewCheck.isSelected()){
                output.setLabels(nameField.getText(),memoField.getText(), amountField.getText(),checkNumber, Proc.getAmountString());
                output.setVisible(true);
                output.doLayout();
            }
            CheckTransaction("Check", memoField.getText(), amountField.getText());
            nameField.setText("");
            memoField.setText("");
            amountField.setText("");
            checkNumber++;
            jFrameInputDialog.dispose();
        }
    }//GEN-LAST:event_nextButtonMousePressed
    /**MenuFileSaveActionPerformed
 * This method opens a dialog box to save the current transaction files and filters specifically .cbk files. It then passes down the file path
 * to a scanner to Save Transactions(). If the user didn't explicitly choose a .cbk file or type ".cbk" it will be appended to the path.
 * 
 * @param evt listener for the event of the Save Menu option being clicked
 */
    private void MenuFileSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuFileSaveActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter(".cbk Files", "cbk");
        chooser.setAcceptAllFileFilterUsed(false);
        chooser.setFileFilter(filter);
        int returnVal = chooser.showSaveDialog(this.MenuFileSave);
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            String filename = chooser.getSelectedFile().getPath();
            if(!filename.substring(filename.length()-4).equals(".cbk")){
                filename += ".cbk";
            }
               try {
                   currentTransactionFile=filename;
                   SaveTransactions(new BufferedWriter( new FileWriter(filename,true)));
                   MenuFileSave.setEnabled(false);
                } catch (IOException ex) {
                    Logger.getLogger(CurrentBalance.class.getName()).log(Level.SEVERE, null, ex);
                }
        }
    }//GEN-LAST:event_MenuFileSaveActionPerformed
    private void TextFieldAmountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TextFieldAmountActionPerformed
        CheckTransaction(mode, TextFieldMemo.getText(), TextFieldAmount.getText());
    }//GEN-LAST:event_TextFieldAmountActionPerformed
    /**Startup
     * This method sets up the jFrame which prompts the user to open or create a new checkbook.
     */
    private void Startup(){
	LabelStartup.setText("Current Balance:");
	LabelStartup.setFont(new Font("Tahoma", Font.PLAIN, 24));
	LabelBalance.setEnabled(true);
	ButtonWithdrawCash.setEnabled(true);
	ButtonWriteCheck.setEnabled(true);
	ButtonMakeDeposit.setEnabled(true);
	MenuFileSave.setEnabled(true);
        AtomicReference tempAmount = new AtomicReference<>(Double.toString(balance));
            stringIsAValidNumber(tempAmount);
	LabelBalance.setText("$" + tempAmount.get());
	
    }
    /**CheckTransaction
     * Verifies that the amount being withdrawn or deposited is feasible and wont overdraw the current balance. It then sends the amount down
     * To update the list of transactions and then updates the current balance displayed to the user.
     * 
     * @param type takes in if the type of transaction is a "Check", "Withdraw", or "Deposit"
     * @param memo takes in the memo field of all transactions
     * @param textAmount takes in a text version of the amount
     */
    public void CheckTransaction(String type, String memo, String textAmount){
        // TODO make sure user only enters valid numbers
	AtomicReference <String> tempAmount = new AtomicReference<>(textAmount);
	
        while(!stringIsAValidNumber(tempAmount)){}//while ends here
            textAmount=tempAmount.get();
            double amount = Double.parseDouble(textAmount);
            switch (type) {
                case "Check":
                    if(amount <= balance && amount > 0){
                    balance -= amount;
                    transactionOK(memoField.getText(), type, amountField.getText());
                    }
                    else if(amount > 0){
                        LabelError.setText("You cannot cash a check for more than what is remaining in your balance!");
                        jDialogError.setVisible(true);
                    }
		    else{
                        LabelError.setText("Your can not write a check for a negative amount!");
                        jDialogError.setVisible(true);
		    }
                    break;
                case "Withdraw":
                    if(amount <= balance && amount > 0){
                        balance -= amount;
                        transactionOK(TextFieldMemo.getText(), "CASH", textAmount);
                    }
		    else if(amount > 0){
                        LabelError.setText("You cannot withdraw more than your balance!");
                        jDialogError.setVisible(true);
                    }
		    else{
                        LabelError.setText("You cannot withdraw a negative amount!");
                        jDialogError.setVisible(true);
		    }
                    break;
                case "Deposit":
                    if(amount >= 0) {
                        balance += amount;
                        transactionOK(TextFieldMemo.getText(), "DEPOSIT", textAmount);
                    }
                    else{
                        LabelError.setText("You cannot deposit a negative amount!");
                        jDialogError.setVisible(true);
                    }
                    break;
                case "Start":
                    if(amount >= 0) {
                        balance = amount;
                        TextFieldMemo.setEnabled(true);
			Startup();
                        transactionOK(TextFieldMemo.getText(), "DEPOSIT", textAmount);
                    }
                    else {
                        LabelError.setText("You cannot start with a negative balance!");
                        jDialogError.setVisible(true);
                    }
                    break;
	}
            tempAmount = new AtomicReference<>(Double.toString(balance));
            stringIsAValidNumber(tempAmount);
	LabelBalance.setText("$" + tempAmount.get());
        
    }
    /**transactionOK
     * This function is where the values are put into the Transactions array where they will be held until the 
     * current transaction is saved.
     * 
     * @param memo takes in the memo from each transaction
     * @param type takes in the type "Check", "Withdraw", or "Deposit"
     * @param amount takes in the amount currently being added or subtracted
     */
    private void transactionOK(String memo, String type, String amount){
        String dateString = Proc.GetDate();
        if(type.equals("Check")){
        Transactions[transactionCount] = (dateString + "," + checkNumber + "," + amount + "," + nameField.getText() + "," + memo + "," + balance);
        }
	else{
        Transactions[transactionCount] = (dateString + "," + type + "," + amount + "," + type + "," + memo + "," + balance);
        }
        MenuFileSave.setEnabled(true);
        transactionCount++;
        TextFieldMemo.setText("");
        TextFieldAmount.setText("");
        jDialogWithdrawDeposit.dispose();
    }
    /**LoadTransactions
     * This method loads the last balance field to the current balance and last check number to the current check number.
     * The temp String is assigned text line by line from load and broken up by scan where temp is used a second time each iteration
     * to be assigned the integer for check.
     * 
     * @param load file handle 
     * @throws IOException 
     */
    private void LoadTransactions(Scanner load) throws IOException{
        String temp;
        Scanner scan;
        while(load.hasNextLine()) {
            temp = load.nextLine();
            scan = new Scanner(temp);
            scan.useDelimiter(",|\\n");
            scan.next();
            String test=scan.next();
            if(!test.equals("CASH") && !test.equals("DEPOSIT")){
                checkNumber=Integer.valueOf(test)+1;
            }
            scan.next();
            scan.next();
            scan.next();
            test=scan.next();
            balance=Double.valueOf(test);
        }//outer while 
    }
    /**SaveTransactions
     * This method saves the current transaction array to the file.
     * 
     * @param save file handle to perform file append
     * @throws IOException 
     */
    private void SaveTransactions(BufferedWriter save)throws IOException{
        for(int i=0; i <= transactionCount - 1;i++ ){
            save.write(Transactions[i]);
            save.newLine();
        }
        save.close();
    }
    /**ClearTransactions
     * Clears the Transactions array and sets transactionCount to 0
     */
    private void ClearTransactions(){
        for(int i=0;i<=transactionCount-1;i++){
         Transactions[i]="";
        }
        transactionCount=0;
    }
    /**VerifyAllTransactionsSaved
     * This method checks to see if all the Transactions have been saved. If they haven't been saved it prompts the user to to save, 
     * discard, or cancel the action.
     * 
     * @returns true if the user doesn't click cancel and decides to continue with the action
     */
    private boolean VerifyAllTransactionsSaved(){
        if(MenuFileSave.isEnabled()){
           int choice;
           choice = JOptionPane.showConfirmDialog(null, "You have unsaved transactions would you like to save your current transactions?", "Save Dialog",JOptionPane.YES_NO_CANCEL_OPTION);
           String filename=currentTransactionFile;
           switch(choice){
               case JOptionPane.YES_OPTION:
            try {
                SaveTransactions(new BufferedWriter( new FileWriter(filename)));
            } catch (IOException ex) {
                Logger.getLogger(CurrentBalance.class.getName()).log(Level.SEVERE, null, ex);
            }
            MenuFileSave.setEnabled(false);
                ClearTransactions(); 
                   break;     
            case JOptionPane.NO_OPTION:
                MenuFileSave.setEnabled(false);
                ClearTransactions();
                   break;
            default:
                   return false;
           }
        }
        return true;
    }
    /**stringIsAValidNumber
     * This method takes a reference to a string to perform the updates if certain text field are missing. This function also verifies that
     * it is being passed numbers and only accepts one decimal in a statement. 
     * 
     * @param amount temporary Atomic Reference to update the calling string with an updated amount
     * @returns true if the number is valid
     */
   public boolean stringIsAValidNumber(AtomicReference <String> amount){
      int postDecimalCount=0;
      boolean postDecimal=false;

            for(int i=0;i<=amount.get().length()-1;i++){            
                      if(!isNumber(amount.get().charAt(i)) && amount.get().charAt(i)!='.' ||
                          amount.get().charAt(i)=='.' && postDecimal ){
                          JOptionPane.showMessageDialog(null, "You may only insert numbers (0-9) and only one decimal (.)", "Improper Input", JOptionPane.ERROR_MESSAGE);
                          amount.set("");
                          return false;
                      }
                      else if(amount.get().charAt(i)=='.'){
                          postDecimal=true;
                      }
                      else if(postDecimal){
                          if(postDecimalCount==2){
                             amount.set(amount.get().substring(0, i));
                          }
                          postDecimalCount++;
                      }
              }
            double doubleAmount=Double.parseDouble(amount.get());
            if(doubleAmount >= 100000.0 || doubleAmount < 0.0){   
                JOptionPane.showMessageDialog(null, "You may only enter values greater than $0.00 or less than $99,999.99. ", "Max Amount Exceeded!", JOptionPane.ERROR_MESSAGE);
                    amount.set("");
                    return false;
                }
            if(!postDecimal){
                amount.set(amount.get() + ".00");
            }
            else if(postDecimal && postDecimalCount==0){
                amount.set(amount.get() + "00");
            }
            else if(postDecimalCount==1){
                amount.set(amount.get() + "0");
            }
        
           return true;
    }
    /**ResetWithdrawDeposit
    * This method resets the text fields to blank and closes the withdrawDeposit jDialog
    */
    private void ResetWithdrawDeposit(){
	TextFieldAmount.setText("");
        TextFieldMemo.setText("");
	jDialogWithdrawDeposit.dispose();
    }
    /**isNumber
     * Method to evaluate if a character is a number
     * 
     * @param ch character to be evaluated
     * @returns true if the character is a number
     */
    private boolean isNumber(char ch){
    char test='0';
    while(test<='9'){
        if(ch==test){
            return true;
        }
            test++;
    }
    return false;
    }
    /**round
     * This method returns a formatted double and rounded to the right decimal place for currency.
     * 
     * @param d double being sent to get formated
     * @returns formatted double
     */
    private double round(double d) {
        DecimalFormat rounded = new DecimalFormat("#.##");
        return Double.valueOf(rounded.format(d));
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonCancel;
    private javax.swing.JButton ButtonErrorOK;
    private javax.swing.JButton ButtonMakeDeposit;
    private javax.swing.JButton ButtonOK;
    private javax.swing.JButton ButtonWithdrawCash;
    private javax.swing.JButton ButtonWriteCheck;
    private javax.swing.JCheckBox CheckBoxViewCheck;
    private javax.swing.JLabel LabelBalance;
    private javax.swing.JLabel LabelError;
    private javax.swing.JLabel LabelMoneySign;
    private javax.swing.JLabel LabelStartup;
    private javax.swing.JLabel LabelWithdrawDeposit;
    private javax.swing.JMenu MenuFile;
    private javax.swing.JMenuItem MenuFileExit;
    private javax.swing.JMenu MenuFileNew;
    private javax.swing.JMenuItem MenuFileNewChkbk;
    private javax.swing.JMenu MenuFileOpen;
    private javax.swing.JMenuItem MenuFileOpenChkbk;
    private javax.swing.JMenuItem MenuFileSave;
    private javax.swing.JTextField TextFieldAmount;
    private javax.swing.JTextField TextFieldMemo;
    private javax.swing.JTextField amountField;
    private javax.swing.JLabel amountLabel;
    private javax.swing.JLabel dateDisplayLabel;
    private javax.swing.JLabel headerLabel;
    private javax.swing.JDialog jDialogError;
    private javax.swing.JDialog jDialogWithdrawDeposit;
    private javax.swing.JFrame jFrameInputDialog;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JTextField memoField;
    private javax.swing.JLabel memoLabel;
    private javax.swing.JTextField nameField;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JButton nextButton;
    // End of variables declaration//GEN-END:variables
}